// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pbrt_bs = require("bs-ocaml-protoc-json/lib/js/src/pbrt_bs.js");
var Messages_types = require("./messages_types.js");

function decode_temperature_unit(json) {
  var match = Pbrt_bs.string(json, "temperature_unit", "value");
  switch (match) {
    case "" :
    case "C" :
        return /* C */0;
    case "F" :
        return /* F */1;
    default:
      return Pbrt_bs.E.malformed_variant("temperature_unit");
  }
}

function decode_temperature(json) {
  var v = {
    u: Messages_types.default_temperature_unit(undefined),
    v: 0
  };
  var keys = Object.keys(json);
  var last_key_index = keys.length - 1 | 0;
  for(var i = 0; i <= last_key_index; ++i){
    var match = keys[i];
    switch (match) {
      case "u" :
          var json$1 = json["u"];
          v.u = decode_temperature_unit(json$1);
          break;
      case "v" :
          var json$2 = json["v"];
          v.v = Pbrt_bs.$$float(json$2, "temperature", "v");
          break;
      default:
        
    }
  }
  return {
          u: v.u,
          v: v.v
        };
}

function decode_request(json) {
  var v = {
    desired: Messages_types.default_temperature_unit(undefined),
    temperature: undefined
  };
  var keys = Object.keys(json);
  var last_key_index = keys.length - 1 | 0;
  for(var i = 0; i <= last_key_index; ++i){
    var match = keys[i];
    switch (match) {
      case "desired" :
          var json$1 = json["desired"];
          v.desired = decode_temperature_unit(json$1);
          break;
      case "temperature" :
          var json$2 = json["temperature"];
          v.temperature = decode_temperature(Pbrt_bs.object_(json$2, "request", "temperature"));
          break;
      default:
        
    }
  }
  return {
          desired: v.desired,
          temperature: v.temperature
        };
}

function decode_response(json) {
  var keys = Object.keys(json);
  var _i = keys.length - 1 | 0;
  while(true) {
    var i = _i;
    if (i === -1) {
      return Pbrt_bs.E.malformed_variant("response");
    }
    var match = keys[i];
    switch (match) {
      case "error" :
          var json$1 = json["error"];
          return {
                  TAG: /* Error */0,
                  _0: Pbrt_bs.string(json$1, "response", "Error")
                };
      case "temperature" :
          var json$2 = json["temperature"];
          return {
                  TAG: /* Temperature */1,
                  _0: decode_temperature(Pbrt_bs.object_(json$2, "response", "Temperature"))
                };
      default:
        _i = i - 1 | 0;
        continue ;
    }
  };
}

function encode_temperature_unit(v) {
  if (v) {
    return "F";
  } else {
    return "C";
  }
}

function encode_temperature(v) {
  var json = {};
  json["u"] = v.u ? "F" : "C";
  json["v"] = v.v;
  return json;
}

function encode_request(v) {
  var json = {};
  json["desired"] = v.desired ? "F" : "C";
  var v$1 = v.temperature;
  if (v$1 !== undefined) {
    var json$prime = encode_temperature(v$1);
    json["temperature"] = json$prime;
  }
  return json;
}

function encode_response(v) {
  var json = {};
  if (v.TAG === /* Error */0) {
    json["error"] = v._0;
  } else {
    var json$prime = encode_temperature(v._0);
    json["temperature"] = json$prime;
  }
  return json;
}

exports.encode_temperature_unit = encode_temperature_unit;
exports.encode_temperature = encode_temperature;
exports.encode_request = encode_request;
exports.encode_response = encode_response;
exports.decode_temperature_unit = decode_temperature_unit;
exports.decode_temperature = decode_temperature;
exports.decode_request = decode_request;
exports.decode_response = decode_response;
/* Pbrt_bs Not a pure module */
